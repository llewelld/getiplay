.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "IO::Seekable 3"
.TH IO::Seekable 3 "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Seekable \- supply seek based methods for I/O objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use IO::Seekable;
\&    package IO::Something;
\&    @ISA = qw(IO::Seekable);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Seekable\*(C'\fR does not have a constructor of its own as it is intended to
be inherited by other \f(CW\*(C`IO::Handle\*(C'\fR based objects. It provides methods
which allow seeking of the file descriptors.
.ie n .IP "$io\->getpos" 4
.el .IP "\f(CW$io\fR\->getpos" 4
.IX Item "$io->getpos"
Returns an opaque value that represents the current position of the
IO::File, or \f(CW\*(C`undef\*(C'\fR if this is not possible (eg an unseekable stream such
as a terminal, pipe or socket). If the \fIfgetpos()\fR function is available in
your C library it is used to implements getpos, else perl emulates getpos
using C's \fIftell()\fR function.
.ie n .IP "$io\->setpos" 4
.el .IP "\f(CW$io\fR\->setpos" 4
.IX Item "$io->setpos"
Uses the value of a previous getpos call to return to a previously visited
position. Returns \*(L"0 but true\*(R" on success, \f(CW\*(C`undef\*(C'\fR on failure.
.PP
See perlfunc for complete descriptions of each of the following
supported \f(CW\*(C`IO::Seekable\*(C'\fR methods, which are just front ends for the
corresponding built-in functions:
.ie n .IP "$io\->seek ( \s-1POS\s0, \s-1WHENCE\s0 )" 4
.el .IP "\f(CW$io\fR\->seek ( \s-1POS\s0, \s-1WHENCE\s0 )" 4
.IX Item "$io->seek ( POS, WHENCE )"
Seek the IO::File to position \s-1POS\s0, relative to \s-1WHENCE:\s0
.RS 4
.IP "WHENCE=0 (\s-1SEEK_SET\s0)" 8
.IX Item "WHENCE=0 (SEEK_SET)"
\&\s-1POS\s0 is absolute position. (Seek relative to the start of the file)
.IP "WHENCE=1 (\s-1SEEK_CUR\s0)" 8
.IX Item "WHENCE=1 (SEEK_CUR)"
\&\s-1POS\s0 is an offset from the current position. (Seek relative to current)
.IP "WHENCE=2 (\s-1SEEK_END\s0)" 8
.IX Item "WHENCE=2 (SEEK_END)"
\&\s-1POS\s0 is an offset from the end of the file. (Seek relative to end)
.RE
.RS 4
.Sp
The SEEK_* constants can be imported from the \f(CW\*(C`Fcntl\*(C'\fR module if you
don't wish to use the numbers \f(CW0\fR \f(CW1\fR or \f(CW2\fR in your code.
.Sp
Returns \f(CW1\fR upon success, \f(CW0\fR otherwise.
.RE
.ie n .IP "$io\->sysseek( \s-1POS\s0, \s-1WHENCE\s0 )" 4
.el .IP "\f(CW$io\fR\->sysseek( \s-1POS\s0, \s-1WHENCE\s0 )" 4
.IX Item "$io->sysseek( POS, WHENCE )"
Similar to \f(CW$io\fR\->seek, but sets the IO::File's position using the system
call \fIlseek\fR\|(2) directly, so will confuse most perl \s-1IO\s0 operators except
sysread and syswrite (see perlfunc for full details)
.Sp
Returns the new position, or \f(CW\*(C`undef\*(C'\fR on failure.  A position
of zero is returned as the string \f(CW"0 but true"\fR
.ie n .IP "$io\->tell" 4
.el .IP "\f(CW$io\fR\->tell" 4
.IX Item "$io->tell"
Returns the IO::File's current position, or \-1 on error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlfunc, 
\&\*(L"I/O Operators\*(R" in perlop,
IO::Handle
IO::File
.SH "HISTORY"
.IX Header "HISTORY"
Derived from FileHandle.pm by Graham Barr <gbarr@pobox.com>

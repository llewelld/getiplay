.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "IO::Socket::UNIX 3"
.TH IO::Socket::UNIX 3 "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::UNIX \- Object interface for AF_UNIX domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::UNIX;
\&
\&    my $SOCK_PATH = "$ENV{HOME}/unix\-domain\-socket\-test.sock";
\&
\&    # Server:
\&    my $server = IO::Socket::UNIX\->new(
\&        Type => SOCK_STREAM(),
\&        Local => $SOCK_PATH,
\&        Listen => 1,
\&    );
\&
\&    my $count = 1;
\&    while (my $conn = $server\->accept()) {
\&        $conn\->print("Hello " . ($count++) . "\en");
\&    }
\&
\&    # Client:
\&    my $client = IO::Socket::UNIX\->new(
\&        Type => SOCK_STREAM(),
\&        Peer => $SOCK_PATH,
\&    );
\&
\&    # Now read and write from $client
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::UNIX\*(C'\fR provides an object interface to creating and using sockets
in the \s-1AF_UNIX\s0 domain. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::UNIX\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::UNIX\*(C'\fR provides.
.Sp
.Vb 4
\&    Type        Type of socket (eg SOCK_STREAM or SOCK_DGRAM)
\&    Local       Path to local fifo
\&    Peer        Path to peer fifo
\&    Listen      Queue size for listen
.Ve
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`Peer\*(C'\fR specification.
.Sp
If the \f(CW\*(C`Listen\*(C'\fR argument is given, but false, the queue size will be set to 5.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIhostpath()\fR" 4
.IX Item "hostpath()"
Returns the pathname to the fifo at the local end
.IP "\fIpeerpath()\fR" 4
.IX Item "peerpath()"
Returns the pathanme to the fifo at the peer end
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

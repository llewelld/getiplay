.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Alien::Build::Plugin::Build::CMake 3"
.TH Alien::Build::Plugin::Build::CMake 3 "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Alien::Build::Plugin::Build::CMake \- CMake plugin for Alien::Build
.SH "VERSION"
.IX Header "VERSION"
version 1.85
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use alienfile;
\& 
\& share {
\&   plugin \*(AqBuild::CMake\*(Aq;
\&   build [
\&     # this is the default build step, if you do not specify one.
\&     [ \*(Aq%{cmake}\*(Aq,
\&         @{ meta\->prop\->{plugin_build_cmake}\->{args} },
\&         # ... put extra cmake args here ...
\&         \*(Aq%{.install.extract}\*(Aq
\&     ],
\&     \*(Aq%{make}\*(Aq,
\&     \*(Aq%{make} install\*(Aq,
\&   ];
\& };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin helps build alienized projects that use \f(CW\*(C`cmake\*(C'\fR.
The intention is to make this a core Alien::Build plugin if/when
it becomes stable enough.
.PP
This plugin provides a meta property \f(CW\*(C`plugin_build_cmake.args\*(C'\fR which may change over time
but for the moment includes:
.PP
.Vb 5
\& \-G %{cmake_generator}                          \e
\& \-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true    \e
\& \-DCMAKE_INSTALL_PREFIX:PATH=%{.install.prefix} \e
\& \-DCMAKE_INSTALL_LIBDIR:PATH=lib                \e
\& \-DCMAKE_MAKE_PROGRAM:PATH=%{make}
.Ve
.PP
This plugin supports out-of-source builds via the meta property \f(CW\*(C`out_of_source\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "cmake_generator"
.IX Subsection "cmake_generator"
Returns the \f(CW\*(C`cmake\*(C'\fR generator according to your Perl's \f(CW\*(C`make\*(C'\fR.
.SS "is_dmake"
.IX Subsection "is_dmake"
Returns true if your Perls \f(CW\*(C`make\*(C'\fR appears to be \f(CW\*(C`dmake\*(C'\fR.
.SH "HELPERS"
.IX Header "HELPERS"
.SS "cmake"
.IX Subsection "cmake"
This plugin replaces the default \f(CW\*(C`cmake\*(C'\fR helper with the one that comes from Alien::cmake3.
.SS "cmake_generator"
.IX Subsection "cmake_generator"
This is the appropriate \f(CW\*(C`cmake\*(C'\fR generator to use based on the make used by your Perl.  This is
frequently \f(CW\*(C`Unix Makefiles\*(C'\fR.  One place where it may be different is if your Windows Perl uses
\&\f(CW\*(C`nmake\*(C'\fR, which comes with Visual \*(C+.
.SS "make"
.IX Subsection "make"
This plugin \fImay\fR replace the default \f(CW\*(C`make\*(C'\fR helper if the default \f(CW\*(C`make\*(C'\fR is not supported by
\&\f(CW\*(C`cmake\*(C'\fR.  This is most often an issue with older versions of Strawberry Perl which used \f(CW\*(C`dmake\*(C'\fR.
On Perls that use \f(CW\*(C`dmake\*(C'\fR, this plugin will search for \s-1GNU\s0 Make in the \s-1PATH\s0, and if it can't be
found will fallback on using Alien::gmake.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Alien::Build" 4
.IX Item "Alien::Build"
.PD 0
.IP "Alien::Build::Plugin::Build::Autoconf" 4
.IX Item "Alien::Build::Plugin::Build::Autoconf"
.IP "alienfile" 4
.IX Item "alienfile"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Author: Graham Ollis <plicease@cpan.org>
.PP
Contributors:
.PP
Diab Jerius (\s-1DJERIUS\s0)
.PP
Roy Storey (\s-1KIWIROY\s0)
.PP
Ilya Pavlov
.PP
David Mertens (run4flat)
.PP
Mark Nunberg (mordy, mnunberg)
.PP
Christian Walde (Mithaldu)
.PP
Brian Wightman (MidLifeXis)
.PP
Zaki Mughal (zmughal)
.PP
mohawk (mohawk2, \s-1ETJ\s0)
.PP
Vikas N Kumar (vikasnkumar)
.PP
Flavio Poletti (polettix)
.PP
Salvador Fandiño (salva)
.PP
Gianni Ceccarelli (dakkar)
.PP
Pavel Shaydo (zwon, trinitum)
.PP
Kang-min Liu (劉康民, gugod)
.PP
Nicholas Shipp (nshp)
.PP
Juan Julián Merelo Guervós (\s-1JJ\s0)
.PP
Joel Berger (\s-1JBERGER\s0)
.PP
Petr Pisar (ppisar)
.PP
Lance Wicks (\s-1LANCEW\s0)
.PP
Ahmad Fatoum (a3f, \s-1ATHREEF\s0)
.PP
José Joaquín Atria (\s-1JJATRIA\s0)
.PP
Duke Leto (\s-1LETO\s0)
.PP
Shoichi Kaji (\s-1SKAJI\s0)
.PP
Shawn Laffan (\s-1SLAFFAN\s0)
.PP
Paul Evans (leonerd, \s-1PEVANS\s0)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011\-2019 by Graham Ollis.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

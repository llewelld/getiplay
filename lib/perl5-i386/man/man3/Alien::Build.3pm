.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Alien::Build 3"
.TH Alien::Build 3 "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Alien::Build \- Build external dependencies for use in CPAN
.SH "VERSION"
.IX Header "VERSION"
version 1.85
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\& my $build = Alien::Build\->load(\*(Aq./alienfile\*(Aq);
\& $build\->load_requires(\*(Aqconfigure\*(Aq);
\& $build\->set_prefix(\*(Aq/usr/local\*(Aq);
\& $build\->set_stage(\*(Aq/foo/mystage\*(Aq);  # needs to be absolute
\& $build\->load_requires($build\->install_type);
\& $build\->download;
\& $build\->build;
\& # files are now in /foo/mystage, it is your job (or
\& # ExtUtils::MakeMaker, Module::Build, etc) to copy
\& # those files into /usr/local
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides tools for building external (non-CPAN) dependencies
for \s-1CPAN\s0.  It is mainly designed to be used at install time of a \s-1CPAN\s0
client, and work closely with Alien::Base which is used at runtime.
.PP
This is the detailed documentation for the Alien::Build class.
If you are starting out you probably want to do so from one of these documents:
.IP "Alien::Build::Manual::Alien" 4
.IX Item "Alien::Build::Manual::Alien"
A broad overview of \f(CW\*(C`Alien\-Build\*(C'\fR and its ecosystem.
.IP "Alien::Build::Manual::AlienUser" 4
.IX Item "Alien::Build::Manual::AlienUser"
For users of an \f(CW\*(C`Alien::libfoo\*(C'\fR that is implemented using Alien::Base.
(The developer of \f(CW\*(C`Alien::libfoo\*(C'\fR \fIshould\fR provide the documentation
necessary, but if not, this is the place to start).
.IP "Alien::Build::Manual::AlienAuthor" 4
.IX Item "Alien::Build::Manual::AlienAuthor"
If you are writing your own Alien based on Alien::Build and Alien::Base.
.IP "Alien::Build::Manual::FAQ" 4
.IX Item "Alien::Build::Manual::FAQ"
If you have a common question that has already been answered, like
"How do I use alienfile with some build system".
.IP "Alien::Build::Manual::PluginAuthor" 4
.IX Item "Alien::Build::Manual::PluginAuthor"
This is for the brave souls who want to write plugins that will work with
Alien::Build + alienfile.
.PP
Note that you will not usually create a Alien::Build instance
directly, but rather be using a thin installer layer, such as
Alien::Build::MM (for use with ExtUtils::MakeMaker) or
Alien::Build::MB (for use with Module::Build).  One of the
goals of this project is to remain installer agnostic.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.SS "new"
.IX Subsection "new"
.Vb 1
\& my $build = Alien::Build\->new;
.Ve
.PP
This creates a new empty instance of Alien::Build.  Normally you will
want to use \f(CW\*(C`load\*(C'\fR below to create an instance of Alien::Build from
an alienfile recipe.
.SS "load"
.IX Subsection "load"
.Vb 1
\& my $build = Alien::Build\->load($alienfile);
.Ve
.PP
This creates an Alien::Build instance with the given alienfile
recipe.
.SS "resume"
.IX Subsection "resume"
.Vb 1
\& my $build = Alien::Build\->resume($alienfile, $root);
.Ve
.PP
Load a checkpointed Alien::Build instance.  You will need the original
alienfile and the build root (usually \f(CW\*(C`_alien\*(C'\fR), and a build that
had been properly checkpointed using the \f(CW\*(C`checkpoint\*(C'\fR method below.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
There are three main properties for Alien::Build.  There are a number
of properties documented here with a specific usage.  Note that these
properties may need to be serialized into something primitive like \s-1JSON\s0
that does not support: regular expressions, code references of blessed
objects.
.PP
If you are writing a plugin (Alien::Build::Plugin) you should use a
prefix like "plugin_\fIname\fR" (where \fIname\fR is the name of your plugin)
so that it does not interfere with other plugin or future versions of
Alien::Build.  For example, if you were writing
\&\f(CW\*(C`Alien::Build::Plugin::Fetch::NewProtocol\*(C'\fR, please use the prefix
\&\f(CW\*(C`plugin_fetch_newprotocol\*(C'\fR:
.PP
.Vb 3
\& sub init
\& {
\&   my($self, $meta) = @_;
\& 
\&   $meta\->prop( plugin_fetch_newprotocol_foo => \*(Aqsome value\*(Aq );
\& 
\&   $meta\->register_hook(
\&     some_hook => sub {
\&       my($build) = @_;
\&       $build\->install_prop\->{plugin_fetch_newprotocol_bar} = \*(Aqsome other value\*(Aq;
\&       $build\->runtime_prop\->{plugin_fetch_newprotocol_baz} = \*(Aqand another value\*(Aq;
\&     }
\&   );
\& }
.Ve
.PP
If you are writing a alienfile recipe please use the prefix \f(CW\*(C`my_\*(C'\fR:
.PP
.Vb 1
\& use alienfile;
\& 
\& meta_prop\->{my_foo} = \*(Aqsome value\*(Aq;
\& 
\& probe sub {
\&   my($build) = @_;
\&   $build\->install_prop\->{my_bar} = \*(Aqsome other value\*(Aq;
\&   $build\->install_prop\->{my_baz} = \*(Aqand another value\*(Aq;
\& };
.Ve
.PP
Any property may be used from a command:
.PP
.Vb 6
\& probe [ \*(Aqsome command %{.meta.plugin_fetch_newprotocol_foo}\*(Aq ];
\& probe [ \*(Aqsome command %{.install.plugin_fetch_newprotocol_bar}\*(Aq ];
\& probe [ \*(Aqsome command %{.runtime.plugin_fetch_newprotocol_baz}\*(Aq ];
\& probe [ \*(Aqsome command %{.meta.my_foo}\*(Aq ];
\& probe [ \*(Aqsome command %{.install.my_bar}\*(Aq ];
\& probe [ \*(Aqsome command %{.runtime.my_baz}\*(Aq ];
.Ve
.SS "meta_prop"
.IX Subsection "meta_prop"
.Vb 2
\& my $href = $build\->meta_prop;
\& my $href = Alien::Build\->meta_prop;
.Ve
.PP
Meta properties have to do with the recipe itself, and not any particular
instance that probes or builds that recipe.  Meta properties can be changed
from within an alienfile using the \f(CW\*(C`meta_prop\*(C'\fR directive, or from
a plugin from its \f(CW\*(C`init\*(C'\fR method (though should \s-1NOT\s0 be modified from any
hooks registered within that \f(CW\*(C`init\*(C'\fR method).  This is not strictly enforced,
but if you do not follow this rule your recipe will likely be broken.
.IP "arch" 4
.IX Item "arch"
This is a hint to an installer like Alien::Build::MM or Alien::Build::MB,
that the library or tool contains architecture dependent files and so should
be stored in an architecture dependent location.  If not specified by your
alienfile then it will be set to true.
.IP "destdir" 4
.IX Item "destdir"
Use the \f(CW\*(C`DESTDIR\*(C'\fR environment variable to stage your install before
copying the files into \f(CW\*(C`blib\*(C'\fR.  This is the preferred method of
installing libraries because it improves reliability.  This technique
is supported by \f(CW\*(C`autoconf\*(C'\fR and others.
.IP "destdir_filter" 4
.IX Item "destdir_filter"
Regular expression for the files that should be copied from the \f(CW\*(C`DESTDIR\*(C'\fR
into the stage directory.  If not defined, then all files will be copied.
.IP "destdir_ffi_filter" 4
.IX Item "destdir_ffi_filter"
Same as \f(CW\*(C`destdir_filter\*(C'\fR except applies to \f(CW\*(C`build_ffi\*(C'\fR instead of \f(CW\*(C`build\*(C'\fR.
.IP "env" 4
.IX Item "env"
Environment variables to override during the build stage.
.IP "env_interpolate" 4
.IX Item "env_interpolate"
Environment variable values will be interpolated with helpers.  Example:
.Sp
.Vb 2
\& meta\->prop\->{env_interpolate} = 1;
\& meta\->prop\->{env}\->{PERL} = \*(Aq%{perl}\*(Aq;
.Ve
.IP "local_source" 4
.IX Item "local_source"
Set to true if source code package is available locally.  (that is not fetched
over the internet).  This is computed by default based on the \f(CW\*(C`start_url\*(C'\fR
property.  Can be set by an alienfile or plugin.
.IP "platform" 4
.IX Item "platform"
Hash reference.  Contains information about the platform beyond just \f(CW$^O\fR.
.RS 4
.IP "compiler_type" 4
.IX Item "compiler_type"
Refers to the type of flags that the compiler accepts.  May be expanded in the
future, but for now, will be one of:
.RS 4
.IP "microsoft" 4
.IX Item "microsoft"
On Windows when using Microsoft Visual \*(C+
.IP "unix" 4
.IX Item "unix"
Virtually everything else, including gcc on windows.
.RE
.RS 4
.Sp
The main difference is that with Visual \*(C+ \f(CW\*(C`\-LIBPATH\*(C'\fR should be used instead
of \f(CW\*(C`\-L\*(C'\fR, and static libraries should have the \f(CW\*(C`.LIB\*(C'\fR suffix instead of \f(CW\*(C`.a\*(C'\fR.
.RE
.IP "system_type" 4
.IX Item "system_type"
\&\f(CW$^O\fR is frequently good enough to make platform specific logic in your
alienfile, this handles the case when $^O can cover platforms that provide
multiple environments that Perl might run under.  The main example is windows,
but others may be added in the future.
.RS 4
.IP "unix" 4
.IX Item "unix"
.PD 0
.IP "vms" 4
.IX Item "vms"
.IP "windows-activestate" 4
.IX Item "windows-activestate"
.IP "windows-microsoft" 4
.IX Item "windows-microsoft"
.IP "windows-mingw" 4
.IX Item "windows-mingw"
.IP "windows-strawberry" 4
.IX Item "windows-strawberry"
.IP "windows-unknown" 4
.IX Item "windows-unknown"
.RE
.RS 4
.PD
.Sp
Note that \f(CW\*(C`cygwin\*(C'\fR and \f(CW\*(C`msys\*(C'\fR are considered \f(CW\*(C`unix\*(C'\fR even though they run
on windows!
.RE
.RE
.RS 4
.RE
.IP "out_of_source" 4
.IX Item "out_of_source"
Build in a different directory from the where the source code is stored.
In autoconf this is referred to as a \*(L"\s-1VPATH\s0\*(R" build.  Everyone else calls this
an \*(L"out-of-source\*(R" build.  When this property is true, instead of extracting
to the source build root, the downloaded source will be extracted to an source
extraction directory and the source build root will be empty.  You can use the
\&\f(CW\*(C`extract\*(C'\fR install property to get the location of the extracted source.
.IP "network" 4
.IX Item "network"
True if a network fetch is available.  This should \s-1NOT\s0 be set by an alienfile
or plugin.  This is computed based on the \f(CW\*(C`ALIEN_INSTALL_NETWORK\*(C'\fR environment
variables.
.IP "start_url" 4
.IX Item "start_url"
The default or start \s-1URL\s0 used by fetch plugins.
.SS "install_prop"
.IX Subsection "install_prop"
.Vb 1
\& my $href = $build\->install_prop;
.Ve
.PP
Install properties are used during the install phase (either
under \f(CW\*(C`share\*(C'\fR or \f(CW\*(C`system\*(C'\fR install).  They are remembered for
the entire install phase, but not kept around during the runtime
phase.  Thus they cannot be accessed from your Alien::Base
based module.
.IP "autoconf_prefix" 4
.IX Item "autoconf_prefix"
The prefix as understood by autoconf.  This is only different on Windows
Where \s-1MSYS\s0 is used and paths like \f(CW\*(C`C:/foo\*(C'\fR are  represented as \f(CW\*(C`/C/foo\*(C'\fR
which are understood by the \s-1MSYS\s0 tools, but not by Perl.  You should
only use this if you are using Alien::Build::Plugin::Autoconf in
your alienfile.
.IP "download" 4
.IX Item "download"
The location of the downloaded archive (tar.gz, or similar) or directory.
.IP "env" 4
.IX Item "env"
Environment variables to override during the build stage.
.IP "extract" 4
.IX Item "extract"
The location of the last source extraction.  For a \*(L"out-of-source\*(R" build
(see the \f(CW\*(C`out_of_source\*(C'\fR meta property above), this will only be set once.
For other types of builds, the source code may be extracted multiple times,
and thus this property may change.
.IP "old" 4
.IX Item "old"
Hash containing information on a previously installed Alien of the same
name, if available.  This may be useful in cases where you want to
reuse the previous install if it is still sufficient.
.RS 4
.IP "prefix" 4
.IX Item "prefix"
The prefix for the previous install.  Versions prior to 1.42 unfortunately
had this in typo form of \f(CW\*(C`preifx\*(C'\fR.
.IP "runtime" 4
.IX Item "runtime"
The runtime properties from the previous install.
.RE
.RS 4
.RE
.IP "patch" 4
.IX Item "patch"
Directory with patches.
.IP "prefix" 4
.IX Item "prefix"
The install time prefix.  Under a \f(CW\*(C`destdir\*(C'\fR install this is the
same as the runtime or final install location.  Under a non\-\f(CW\*(C`destdir\*(C'\fR
install this is the \f(CW\*(C`stage\*(C'\fR directory (usually the appropriate
share directory under \f(CW\*(C`blib\*(C'\fR).
.IP "root" 4
.IX Item "root"
The build root directory.  This will be an absolute path.  It is the
absolute form of \f(CW\*(C`./_alien\*(C'\fR by default.
.IP "stage" 4
.IX Item "stage"
The stage directory where files will be copied.  This is usually the
root of the blib share directory.
.SS "runtime_prop"
.IX Subsection "runtime_prop"
.Vb 1
\& my $href = $build\->runtime_prop;
.Ve
.PP
Runtime properties are used during the install and runtime phases
(either under \f(CW\*(C`share\*(C'\fR or \f(CW\*(C`system\*(C'\fR install).  This should include
anything that you will need to know to use the library or tool
during runtime, and shouldn't include anything that is no longer
relevant once the install process is complete.
.IP "alien_build_version" 4
.IX Item "alien_build_version"
The version of Alien::Build used to install the library or tool.
.IP "alt" 4
.IX Item "alt"
Alternate configurations.  If the alienized package has multiple
libraries this could be used to store the different compiler or
linker flags for each library.
.IP "cflags" 4
.IX Item "cflags"
The compiler flags
.IP "cflags_static" 4
.IX Item "cflags_static"
The static compiler flags
.IP "command" 4
.IX Item "command"
The command name for tools where the name my differ from platform to
platform.  For example, the \s-1GNU\s0 version of make is usually \f(CW\*(C`make\*(C'\fR in
Linux and \f(CW\*(C`gmake\*(C'\fR on FreeBSD.
.IP "ffi_name" 4
.IX Item "ffi_name"
The name \s-1DLL\s0 or shared object \*(L"name\*(R" to use when searching for dynamic
libraries at runtime.  This is passed into FFI::CheckLib, so if
your library is something like \f(CW\*(C`libarchive.so\*(C'\fR or \f(CW\*(C`archive.dll\*(C'\fR you
would set this to \f(CW\*(C`archive\*(C'\fR.  This may be a string or an array of
strings.
.IP "ffi_checklib" 4
.IX Item "ffi_checklib"
This property contains two sub properties:
.RS 4
.IP "share" 4
.IX Item "share"
.Vb 1
\& $build\->runtime_prop\->{ffi_checklib}\->{share} = [ ... ];
.Ve
.Sp
Array of additional FFI::CheckLib flags to pass in to \f(CW\*(C`find_lib\*(C'\fR
for a \f(CW\*(C`share\*(C'\fR install.
.IP "system" 4
.IX Item "system"
Array of additional FFI::CheckLib flags to pass in to \f(CW\*(C`find_lib\*(C'\fR
for a \f(CW\*(C`system\*(C'\fR install.
.Sp
Among other things, useful for specifying the \f(CW\*(C`try_linker_script\*(C'\fR
flag:
.Sp
.Vb 1
\& $build\->runtime_prop\->{ffi_checklib}\->{system} = [ try_linker_script => 1 ];
.Ve
.RE
.RS 4
.RE
.IP "install_type" 4
.IX Item "install_type"
The install type.  Is one of:
.RS 4
.IP "system" 4
.IX Item "system"
For when the library or tool is provided by the operating system, can be
detected by Alien::Build, and is considered satisfactory by the
\&\f(CW\*(C`alienfile\*(C'\fR recipe.
.IP "share" 4
.IX Item "share"
For when a system install is not possible, the library source will be
downloaded from the internet or retrieved in another appropriate fashion
and built.
.RE
.RS 4
.RE
.IP "libs" 4
.IX Item "libs"
The library flags
.IP "libs_static" 4
.IX Item "libs_static"
The static library flags
.IP "perl_module_version" 4
.IX Item "perl_module_version"
The version of the Perl module used to install the alien (if available).
For example if Alien::curl is installing \f(CW\*(C`libcurl\*(C'\fR this would be the
version of Alien::curl used during the install step.
.IP "prefix" 4
.IX Item "prefix"
The final install root.  This is usually they share directory.
.IP "version" 4
.IX Item "version"
The version of the library or tool
.SS "hook_prop"
.IX Subsection "hook_prop"
.Vb 1
\& my $href = $build\->hook_prop;
.Ve
.PP
Hook properties are for the currently running (if any) hook.  They are
used only during the execution of each hook and are discarded after.
If no hook is currently running then \f(CW\*(C`hook_prop\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.
.IP "name" 4
.IX Item "name"
The name of the currently running hook.
.IP "version (probe)" 4
.IX Item "version (probe)"
Probe and PkgConfig plugins \fImay\fR set this property indicating the
version of the alienized package.  Not all plugins and configurations
may be able to provide this.
.SH "METHODS"
.IX Header "METHODS"
.SS "checkpoint"
.IX Subsection "checkpoint"
.Vb 1
\& $build\->checkpoint;
.Ve
.PP
Save any install or runtime properties so that they can be reloaded on
a subsequent run in a separate process.  This is useful if your build
needs to be done in multiple stages from a \f(CW\*(C`Makefile\*(C'\fR, such as with
ExtUtils::MakeMaker.  Once checkpointed you can use the \f(CW\*(C`resume\*(C'\fR
constructor (documented above) to resume the probe/build/install]
process.
.SS "root"
.IX Subsection "root"
.Vb 1
\& my $dir = $build\->root;
.Ve
.PP
This is just a shortcut for:
.PP
.Vb 1
\& my $root = $build\->install_prop\->{root};
.Ve
.PP
Except that it will be created if it does not already exist.
.SS "install_type"
.IX Subsection "install_type"
.Vb 1
\& my $type = $build\->install_type;
.Ve
.PP
This will return the install type.  (See the like named install property
above for details).  This method will call \f(CW\*(C`probe\*(C'\fR if it has not already
been called.
.SS "set_prefix"
.IX Subsection "set_prefix"
.Vb 1
\& $build\->set_prefix($prefix);
.Ve
.PP
Set the final (unstaged) prefix.  This is normally only called by Alien::Build::MM
and similar modules.  It is not intended for use from plugins or from an alienfile.
.SS "set_stage"
.IX Subsection "set_stage"
.Vb 1
\& $build\->set_stage($dir);
.Ve
.PP
Sets the stage directory.  This is normally only called by Alien::Build::MM
and similar modules.  It is not intended for use from plugins or from an alienfile.
.SS "requires"
.IX Subsection "requires"
.Vb 1
\& my $hash = $build\->requires($phase);
.Ve
.PP
Returns a hash reference of the modules required for the given phase.  Phases
include:
.IP "configure" 4
.IX Item "configure"
These modules must already be available when the alienfile is read.
.IP "any" 4
.IX Item "any"
These modules are used during either a \f(CW\*(C`system\*(C'\fR or \f(CW\*(C`share\*(C'\fR install.
.IP "share" 4
.IX Item "share"
These modules are used during the build phase of a \f(CW\*(C`share\*(C'\fR install.
.IP "system" 4
.IX Item "system"
These modules are used during the build phase of a \f(CW\*(C`system\*(C'\fR install.
.SS "load_requires"
.IX Subsection "load_requires"
.Vb 1
\& $build\->load_requires($phase);
.Ve
.PP
This loads the appropriate modules for the given phase (see \f(CW\*(C`requires\*(C'\fR above
for a description of the phases).
.SS "probe"
.IX Subsection "probe"
.Vb 1
\& my $install_type = $build\->probe;
.Ve
.PP
Attempts to determine if the operating system has the library or
tool already installed.  If so, then the string \f(CW\*(C`system\*(C'\fR will
be returned and a system install will be performed.  If not,
then the string \f(CW\*(C`share\*(C'\fR will be installed and the tool or
library will be downloaded and built from source.
.PP
If the environment variable \f(CW\*(C`ALIEN_INSTALL_TYPE\*(C'\fR is set, then that
will force a specific type of install.  If the detection logic
cannot accommodate the install type requested then it will fail with
an exception.
.SS "download"
.IX Subsection "download"
.Vb 1
\& $build\->download;
.Ve
.PP
Download the source, usually as a tarball, usually from the internet.
.PP
Under a \f(CW\*(C`system\*(C'\fR install this does not do anything.
.SS "fetch"
.IX Subsection "fetch"
.Vb 2
\& my $res = $build\->fetch;
\& my $res = $build\->fetch($url);
.Ve
.PP
Fetch a resource using the fetch hook.  Returns the same hash structure
described below in the hook documentation.
.SS "decode"
.IX Subsection "decode"
.Vb 1
\& my $decoded_res = $build\->decode($res);
.Ve
.PP
Decode the \s-1HTML\s0 or file listing returned by \f(CW\*(C`fetch\*(C'\fR.  Returns the same
hash structure described below in the hook documentation.
.SS "prefer"
.IX Subsection "prefer"
.Vb 1
\& my $sorted_res = $build\->prefer($res);
.Ve
.PP
Filter and sort candidates.  The preferred candidate will be returned first in the list.
The worst candidate will be returned last.  Returns the same hash structure described
below in the hook documentation.
.SS "extract"
.IX Subsection "extract"
.Vb 2
\& my $dir = $build\->extract;
\& my $dir = $build\->extract($archive);
.Ve
.PP
Extracts the given archive into a fresh directory.  This is normally called internally
to Alien::Build, and for normal usage is not needed from a plugin or alienfile.
.SS "build"
.IX Subsection "build"
.Vb 1
\& $build\->build;
.Ve
.PP
Run the build step.  It is expected that \f(CW\*(C`probe\*(C'\fR and \f(CW\*(C`download\*(C'\fR
have already been performed.  What it actually does depends on the
type of install:
.IP "share" 4
.IX Item "share"
The source is extracted, and built as determined by the alienfile
recipe.  If there is a \f(CW\*(C`gather_share\*(C'\fR that will be executed last.
.IP "system" 4
.IX Item "system"
The \f(CW\*(C`gather_system\*(C'\fR hook will be executed.
.SS "test"
.IX Subsection "test"
.Vb 1
\& $build\->test;
.Ve
.PP
Run the test phase
.SS "clean_install"
.IX Subsection "clean_install"
.Vb 1
\& $build\->clean_install
.Ve
.PP
Clean files from the final install location.  The default implementation removes all
files recursively except for the \f(CW\*(C`_alien\*(C'\fR directory.  This is helpful when you have
an old install with files that may break the new build.
.PP
For a non-share install this doesn't do anything.
.SS "system"
.IX Subsection "system"
.Vb 2
\& $build\->system($command);
\& $build\->system($command, @args);
.Ve
.PP
Interpolates the command and arguments and run the results using
the Perl \f(CW\*(C`system\*(C'\fR command.
.SS "log"
.IX Subsection "log"
.Vb 1
\& $build\->log($message);
.Ve
.PP
Send a message to the log.  By default this prints to \f(CW\*(C`STDOUT\*(C'\fR.
.SS "meta"
.IX Subsection "meta"
.Vb 2
\& my $meta = Alien::Build\->meta;
\& my $meta = $build\->meta;
.Ve
.PP
Returns the meta object for your Alien::Build class or instance.  The
meta object is a way to manipulate the recipe, and so any changes to the
meta object should be made before the \f(CW\*(C`probe\*(C'\fR, \f(CW\*(C`download\*(C'\fR or \f(CW\*(C`build\*(C'\fR steps.
.SH "META METHODS"
.IX Header "META METHODS"
.SS "prop"
.IX Subsection "prop"
.Vb 1
\& my $href = $build\->meta\->prop;
.Ve
.PP
Meta properties.  This is the same as calling \f(CW\*(C`meta_prop\*(C'\fR on
the class or Alien::Build instance.
.SS "add_requires"
.IX Subsection "add_requires"
.Vb 1
\& Alien::Build\->meta\->add_requires($phase, $module => $version, ...);
.Ve
.PP
Add the requirement to the given phase.  Phase should be one of:
.IP "configure" 4
.IX Item "configure"
.PD 0
.IP "any" 4
.IX Item "any"
.IP "share" 4
.IX Item "share"
.IP "system" 4
.IX Item "system"
.PD
.SS "interpolator"
.IX Subsection "interpolator"
.Vb 2
\& my $interpolator = $build\->meta\->interpolator;
\& my $interpolator = Alien::Build\->interpolator;
.Ve
.PP
Returns the Alien::Build::Interpolate instance for the Alien::Build class.
.SS "has_hook"
.IX Subsection "has_hook"
.Vb 2
\& my $bool = $build\->meta\->has_hook($name);
\& my $bool = Alien::Build\->has_hook($name);
.Ve
.PP
Returns if there is a usable hook registered with the given name.
.SS "register_hook"
.IX Subsection "register_hook"
.Vb 2
\& $build\->meta\->register_hook($name, $instructions);
\& Alien::Build\->meta\->register_hook($name, $instructions);
.Ve
.PP
Register a hook with the given name.  \f(CW$instruction\fR should be either
a code reference, or a command sequence, which is an array reference.
.SS "default_hook"
.IX Subsection "default_hook"
.Vb 2
\& $build\->meta\->default_hook($name, $instructions);
\& Alien::Build\->meta\->default_hook($name, $instructions);
.Ve
.PP
Register a default hook, which will be used if the alienfile does not
register its own hook with that name.
.SS "around_hook"
.IX Subsection "around_hook"
.Vb 2
\& $build\->meta\->around_hook($hook, $code);
\& Alien::Build\->meta\->around_hook($name, $code);
.Ve
.PP
Wrap the given hook with a code reference.  This is similar to a Moose
method modifier, except that it wraps around the given hook instead of
a method.  For example, this will add a probe system requirement:
.PP
.Vb 10
\& $build\->meta\->around_hook(
\&   probe => sub {
\&     my $orig = shift;
\&     my $build = shift;
\&     my $type = $orig\->($build, @_);
\&     return $type unless $type eq \*(Aqsystem\*(Aq;
\&     # also require a configuration file
\&     if(\-f \*(Aq/etc/foo.conf\*(Aq)
\&     {
\&       return \*(Aqsystem\*(Aq;
\&     }
\&     else
\&     {
\&       return \*(Aqshare\*(Aq;
\&     }
\&   },
\& );
.Ve
.SS "apply_plugin"
.IX Subsection "apply_plugin"
.Vb 2
\& Alien::Build\->meta\->apply_plugin($name);
\& Alien::Build\->meta\->apply_plugin($name, @args);
.Ve
.PP
Apply the given plugin with the given arguments.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Alien::Build responds to these environment variables:
.IP "\s-1ALIEN_INSTALL_NETWORK\s0" 4
.IX Item "ALIEN_INSTALL_NETWORK"
If set to true (the default), then network fetch will be allowed.  If set to
false, then network fetch will not be allowed.
.Sp
What constitutes a local vs. network fetch is determined based on the \f(CW\*(C`start_url\*(C'\fR
and \f(CW\*(C`local_source\*(C'\fR meta properties.  An alienfile or plugin \f(CW\*(C`could\*(C'\fR override
this detection (possibly inappropriately), so this variable is not a substitute
for properly auditing of Perl modules for environments that require that.
.IP "\s-1ALIEN_INSTALL_TYPE\s0" 4
.IX Item "ALIEN_INSTALL_TYPE"
If set to \f(CW\*(C`share\*(C'\fR or \f(CW\*(C`system\*(C'\fR, it will override the system detection logic.
If set to \f(CW\*(C`default\*(C'\fR, it will use the default setting for the alienfile.
The behavior of other values is undefined.
.Sp
Although the recommended way for a consumer to use an Alien::Base based Alien
is to declare it as a static configure and build-time dependency, some consumers
may prefer to fallback on using an Alien only when the consumer itself cannot
detect the necessary package. In some cases the consumer may want the user to opt-in
to using an Alien before requiring it.
.Sp
To keep the interface consistent among Aliens, the consumer of the fallback opt-in
Alien may fallback on the Alien if the environment variable \f(CW\*(C`ALIEN_INSTALL_TYPE\*(C'\fR
is set to any value. The rationale is that by setting this environment variable the
user is aware that Alien modules may be installed and have indicated consent.
The actual implementation of this, by its nature would have to be in the consuming
\&\s-1CPAN\s0 module.
.IP "\s-1ALIEN_BUILD_LOG\s0" 4
.IX Item "ALIEN_BUILD_LOG"
The default log class used.  See Alien::Build::Log and <Alien:Build::Log::Default>.
.IP "\s-1ALIEN_BUILD_RC\s0" 4
.IX Item "ALIEN_BUILD_RC"
Perl source file which can override some global defaults for Alien::Build,
by, for example, setting preload and postload plugins.
.IP "\s-1ALIEN_BUILD_PKG_CONFIG\s0" 4
.IX Item "ALIEN_BUILD_PKG_CONFIG"
Override the logic in Alien::Build::Plugin::PkgConfig::Negotiate which
chooses the best \f(CW\*(C`pkg\-config\*(C'\fR plugin.
.IP "\s-1ALIEN_BUILD_PRELOAD\s0" 4
.IX Item "ALIEN_BUILD_PRELOAD"
semicolon separated list of plugins to automatically load before parsing
your alienfile.
.IP "\s-1ALIEN_BUILD_POSTLOAD\s0" 4
.IX Item "ALIEN_BUILD_POSTLOAD"
semicolon separated list of plugins to automatically load after parsing
your alienfile.
.IP "\s-1DESTDIR\s0" 4
.IX Item "DESTDIR"
This environment variable will be manipulated during a destdir install.
.IP "\s-1PKG_CONFIG\s0" 4
.IX Item "PKG_CONFIG"
This environment variable can be used to override the program name for \f(CW\*(C`pkg\-config\*(C'\fR
when using the command line plugin: Alien::Build::Plugin::PkgConfig::CommandLine.
.IP "ftp_proxy, all_proxy" 4
.IX Item "ftp_proxy, all_proxy"
If these environment variables are set, it may influence the Download negotiation
plugin Alien::Build::Plugin::Downaload::Negotiate.  Other proxy variables may
be used by some Fetch plugins, if they support it.
.SH "SUPPORT"
.IX Header "SUPPORT"
The intent of the \f(CW\*(C`Alien\-Build\*(C'\fR team is to support as best as possible
all Perls from 5.8.1 to the latest production version.  So long as they
are also supported by the Perl toolchain.
.PP
Please feel encouraged to report issues that you encounter to the
project GitHub Issue tracker:
.IP "https://github.com/Perl5\-Alien/Alien\-Build/issues <https://github.com/Perl5-Alien/Alien-Build/issues>" 4
.IX Item "https://github.com/Perl5-Alien/Alien-Build/issues <https://github.com/Perl5-Alien/Alien-Build/issues>"
.PP
Better if you can fix the issue yourself, please feel encouraged to open
pull-request on the project GitHub:
.IP "https://github.com/Perl5\-Alien/Alien\-Build/pulls <https://github.com/Perl5-Alien/Alien-Build/pulls>" 4
.IX Item "https://github.com/Perl5-Alien/Alien-Build/pulls <https://github.com/Perl5-Alien/Alien-Build/pulls>"
.PP
If you are confounded and have questions, join us on the \f(CW\*(C`#native\*(C'\fR
channel on irc.perl.org.  The \f(CW\*(C`Alien\-Build\*(C'\fR developers frequent this
channel and can probably help point you in the right direction.  If you
don't have an \s-1IRC\s0 client handy, you can use this web interface:
.IP "<https://chat.mibbit.com/?channel=%23native&server=irc.perl.org>" 4
.IX Item "<https://chat.mibbit.com/?channel=%23native&server=irc.perl.org>"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Alien::Build::Manual::AlienAuthor,
Alien::Build::Manual::AlienUser,
Alien::Build::Manual::Contributing,
Alien::Build::Manual::FAQ,
Alien::Build::Manual::PluginAuthor
.PP
alienfile, Alien::Build::MM, Alien::Build::Plugin, Alien::Base, Alien
.SH "THANKS"
.IX Header "THANKS"
Alien::Base was originally written by Joel Berger, the rest of this project would
not have been possible without him getting the project started.  Thanks to his support
I have been able to augment the original Alien::Base system with a reliable set
of tools (Alien::Build, alienfile, Test::Alien), which make up this toolset.
.PP
The original Alien::Base is still copyright (c) 2012\-2017 Joel Berger.  It has
the same license as the rest of the Alien::Build and related tools distributed as
\&\f(CW\*(C`Alien\-Build\*(C'\fR.  Joel Berger thanked a number of people who helped in in the development
of Alien::Base, in the documentation for that module.
.PP
I would also like to acknowledge the other members of the Perl5\-Alien github
organization, Zakariyya Mughal (sivoais, \s-1ZMUGHAL\s0) and mohawk (\s-1ETJ\s0).  Also important
in the early development of Alien::Build were the early adopters Chase Whitener
(genio, \s-1CAPOEIRAB\s0, author of Alien::libuv), William N. Braswell, Jr (willthechill,
\&\s-1WBRASWELL\s0, author of Alien::JPCRE2 and Alien::PCRE2) and Ahmad Fatoum (a3f,
\&\s-1ATHREEF\s0, author of Alien::libudev and Alien::LibUSB).
.SH "AUTHOR"
.IX Header "AUTHOR"
Author: Graham Ollis <plicease@cpan.org>
.PP
Contributors:
.PP
Diab Jerius (\s-1DJERIUS\s0)
.PP
Roy Storey (\s-1KIWIROY\s0)
.PP
Ilya Pavlov
.PP
David Mertens (run4flat)
.PP
Mark Nunberg (mordy, mnunberg)
.PP
Christian Walde (Mithaldu)
.PP
Brian Wightman (MidLifeXis)
.PP
Zaki Mughal (zmughal)
.PP
mohawk (mohawk2, \s-1ETJ\s0)
.PP
Vikas N Kumar (vikasnkumar)
.PP
Flavio Poletti (polettix)
.PP
Salvador Fandiño (salva)
.PP
Gianni Ceccarelli (dakkar)
.PP
Pavel Shaydo (zwon, trinitum)
.PP
Kang-min Liu (劉康民, gugod)
.PP
Nicholas Shipp (nshp)
.PP
Juan Julián Merelo Guervós (\s-1JJ\s0)
.PP
Joel Berger (\s-1JBERGER\s0)
.PP
Petr Pisar (ppisar)
.PP
Lance Wicks (\s-1LANCEW\s0)
.PP
Ahmad Fatoum (a3f, \s-1ATHREEF\s0)
.PP
José Joaquín Atria (\s-1JJATRIA\s0)
.PP
Duke Leto (\s-1LETO\s0)
.PP
Shoichi Kaji (\s-1SKAJI\s0)
.PP
Shawn Laffan (\s-1SLAFFAN\s0)
.PP
Paul Evans (leonerd, \s-1PEVANS\s0)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011\-2019 by Graham Ollis.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Test::Alien::Synthetic 3"
.TH Test::Alien::Synthetic 3 "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Alien::Synthetic \- A mock alien object for testing
.SH "VERSION"
.IX Header "VERSION"
version 1.85
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Test2::V0;
\& use Test::Alien;
\& 
\& my $alien = synthetic {
\&   cflags => \*(Aq\-I/foo/bar/include\*(Aq,
\&   libs   => \*(Aq\-L/foo/bar/lib \-lbaz\*(Aq,
\& };
\& 
\& alien_ok $alien;
\& 
\& done_testing;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is used to model a synthetic Alien
class that implements the minimum Alien::Base
interface needed by Test::Alien.
.PP
It can be useful if you have a non\-Alien::Base
based Alien distribution that you need to test.
.PP
\&\fB\s-1NOTE\s0\fR: The name of this class may move in the
future, so do not refer to this class name directly.
Instead create instances of this class using the
Test::Alien#synthetic function.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "cflags"
.IX Subsection "cflags"
String containing the compiler flags
.SS "cflags_static"
.IX Subsection "cflags_static"
String containing the static compiler flags
.SS "libs"
.IX Subsection "libs"
String containing the linker and library flags
.SS "libs_static"
.IX Subsection "libs_static"
String containing the static linker and library flags
.SS "dynamic_libs"
.IX Subsection "dynamic_libs"
List reference containing the dynamic libraries.
.SS "bin_dir"
.IX Subsection "bin_dir"
Tool binary directory.
.SS "runtime_prop"
.IX Subsection "runtime_prop"
Runtime properties.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here is a complete example using Alien::Libarchive which is a non\-Alien::Base
based Alien distribution.
.PP
.Vb 5
\& use strict;
\& use warnings;
\& use Test2::V0;
\& use Test::Alien;
\& use Alien::Libarchive;
\& 
\& my $real = Alien::Libarchive\->new;
\& my $alien = synthetic {
\&   cflags       => scalar $real\->cflags,
\&   libs         => scalar $real\->libs,
\&   dynamic_libs => [$real\->dlls],
\& };
\& 
\& alien_ok $alien;
\& 
\& xs_ok do { local $/; <DATA> }, with_subtest {
\&   my($module) = @_;
\&   my $ptr = $module\->archive_read_new;
\&   like $ptr, qr{^[0\-9]+$};
\&   $module\->archive_read_free($ptr);
\& };
\& 
\& ffi_ok { symbols => [qw( archive_read_new )] }, with_subtest {
\&   my($ffi) = @_;
\&   my $new  = $ffi\->function(archive_read_new => [] => \*(Aqopaque\*(Aq);
\&   my $free = $ffi\->function(archive_read_close => [\*(Aqopaque\*(Aq] => \*(Aqvoid\*(Aq);
\&   my $ptr = $new\->();
\&   like $ptr, qr{^[0\-9]+$};
\&   $free\->($ptr);
\& };
\& 
\& done_testing;
\& 
\& _\|_DATA_\|_
\& 
\& #include "EXTERN.h"
\& #include "perl.h"
\& #include "XSUB.h"
\& #include <archive.h>
\& 
\& MODULE = TA_MODULE PACKAGE = TA_MODULE
\& 
\& void *archive_read_new(class);
\&     const char *class;
\&   CODE:
\&     RETVAL = (void*) archive_read_new();
\&   OUTPUT:
\&     RETVAL
\& 
\& void archive_read_free(class, ptr);
\&     const char *class;
\&     void *ptr;
\&   CODE:
\&     archive_read_free(ptr);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Test::Alien" 4
.IX Item "Test::Alien"
.SH "AUTHOR"
.IX Header "AUTHOR"
Author: Graham Ollis <plicease@cpan.org>
.PP
Contributors:
.PP
Diab Jerius (\s-1DJERIUS\s0)
.PP
Roy Storey (\s-1KIWIROY\s0)
.PP
Ilya Pavlov
.PP
David Mertens (run4flat)
.PP
Mark Nunberg (mordy, mnunberg)
.PP
Christian Walde (Mithaldu)
.PP
Brian Wightman (MidLifeXis)
.PP
Zaki Mughal (zmughal)
.PP
mohawk (mohawk2, \s-1ETJ\s0)
.PP
Vikas N Kumar (vikasnkumar)
.PP
Flavio Poletti (polettix)
.PP
Salvador Fandiño (salva)
.PP
Gianni Ceccarelli (dakkar)
.PP
Pavel Shaydo (zwon, trinitum)
.PP
Kang-min Liu (劉康民, gugod)
.PP
Nicholas Shipp (nshp)
.PP
Juan Julián Merelo Guervós (\s-1JJ\s0)
.PP
Joel Berger (\s-1JBERGER\s0)
.PP
Petr Pisar (ppisar)
.PP
Lance Wicks (\s-1LANCEW\s0)
.PP
Ahmad Fatoum (a3f, \s-1ATHREEF\s0)
.PP
José Joaquín Atria (\s-1JJATRIA\s0)
.PP
Duke Leto (\s-1LETO\s0)
.PP
Shoichi Kaji (\s-1SKAJI\s0)
.PP
Shawn Laffan (\s-1SLAFFAN\s0)
.PP
Paul Evans (leonerd, \s-1PEVANS\s0)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011\-2019 by Graham Ollis.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

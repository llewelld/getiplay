.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Alien::Build::Manual::FAQ 3"
.TH Alien::Build::Manual::FAQ 3 "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Alien::Build::Manual::FAQ \- Frequently Asked Questions about Alien::Build
.SH "VERSION"
.IX Header "VERSION"
version 1.85
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& perldoc Alien::Build::Manual::FAQ
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document serves to answer the most frequently asked questions made by developers
creating Alien modules using Alien::Build.
.SH "QUESTIONS"
.IX Header "QUESTIONS"
.SS "What is Alien, Alien::Base and Alien::Build?"
.IX Subsection "What is Alien, Alien::Base and Alien::Build?"
Alien in a Perl namespace for defining dependencies in \s-1CPAN\s0 for libraries and tools which
are not \*(L"native\*(R" to \s-1CPAN\s0.  For a manifesto style description of the Why, and How see
Alien.  Alien::Base is a base class for the Alien runtime.  Alien::Build is
a tool for probing the operating system for existing libraries and tools, and downloading, building
and installing packages.  alienfile is a recipe format for describing how to probe,
download, build and install a package.
.SS "How do I build a package that uses \fIbuild system\fP"
.IX Subsection "How do I build a package that uses build system"
\fIautoconf\fR
.IX Subsection "autoconf"
.PP
Use the autoconf plugin (Alien::Build::Plugin::Build::Autoconf).  If your package
provides a pkg-config \f(CW\*(C`.pc\*(C'\fR file, then you can also use the PkgConfig plugin
(Alien::Build::Plugin::PkgConfig::Negotiate).
.PP
.Vb 10
\& use alienfile
\& plugin PkgConfig => \*(Aqlibfoo\*(Aq;
\& share {
\&   start_url => \*(Aqhttp://example.org/dist\*(Aq;
\&   plugin Download => (
\&     version => qr/libfoo\-([0\-9\e.])\e.tar\e.gz$/,
\&   );
\&   plugin Extract => \*(Aqtar.gz\*(Aq;
\&   plugin \*(AqBuild::Autoconf\*(Aq;
\& };
.Ve
.PP
If you need to provide custom flags to configure, you can do that too:
.PP
.Vb 8
\& share {
\&   plugin \*(AqBuild::Autoconf\*(Aq;
\&   build [
\&     \*(Aq%{configure} \-\-disable\-shared \-\-enable\-foo\*(Aq,
\&     \*(Aq%{make}\*(Aq,
\&     \*(Aq%{make} install\*(Aq,
\&   ];
\& };
.Ve
.PP
If your package requires \s-1GNU\s0 Make, use \f(CW\*(C`%{gmake}\*(C'\fR instead of \f(CW\*(C`%{make}\*(C'\fR.
.PP
\fIautoconf-like\fR
.IX Subsection "autoconf-like"
.PP
If you see an error like this:
.PP
.Vb 1
\& Unknown option "\-\-with\-pic".
.Ve
.PP
It is because the autoconf plugin uses the \f(CW\*(C`\-\-with\-pic\*(C'\fR option by default, since
it makes sense most of the time, and autoconf usually ignores options that it does
not recognize.  Some autoconf style build systems fail when they see an option that
they do not recognize.  You can turn this behavior off for these packages:
.PP
.Vb 3
\& plugin \*(AqBuild::Autoconf\*(Aq => (
\&   with_pic => 0,
\& );
.Ve
.PP
Another thing about the autoconf plugin is that it uses \f(CW\*(C`DESTDIR\*(C'\fR to do a double
staged install.  If you see an error like \*(L"nothing was installed into destdir\*(R", that
means that your package does not support \f(CW\*(C`DESTDIR\*(C'\fR.  You should instead use the
\&\s-1MSYS\s0 plugin and use a command sequence to do the build like this:
.PP
.Vb 10
\& share {
\&   plugin \*(AqBuild::MSYS\*(Aq;
\&   build [
\&     # explicitly running configure with "sh" will make sure that
\&     # it works on windows as well as UNIX.
\&     \*(Aqsh configure \-\-prefix=%{.install.prefix} \-\-disable\-shared\*(Aq,
\&     \*(Aq%{make}\*(Aq,
\&     \*(Aq%{make} install\*(Aq,
\&   ];
\& };
.Ve
.PP
\fICMake\fR
.IX Subsection "CMake"
.PP
There is an alien Alien::cmake3 that provides \f(CW\*(C`cmake\*(C'\fR 3.x or better (It is preferred to the
older Alien::CMake).  Though it is recommended that you use the \f(CW\*(C`cmake\*(C'\fR 
(Alien::Build::Plugin::Build::CMake) plugin instead of using Alien::cmake3.
.PP
.Vb 1
\& use alienfile;
\& 
\& share {
\&   plugin \*(AqBuild::CMake\*(Aq;
\&   build [
\&     # this is the default build step, if you do not specify one.
\&     [ \*(Aq%{cmake}\*(Aq,
\&         @{ meta\->prop\->{plugin_build_cmake}\->{args} },
\&         # ... put extra cmake args here ...
\&         \*(Aq.\*(Aq
\&     ],
\&     \*(Aq%{make}\*(Aq,
\&     \*(Aq%{make} install\*(Aq,
\&   ];
\& };
.Ve
.PP
\fIvanilla Makefiles\fR
.IX Subsection "vanilla Makefiles"
.PP
Alien::Build provides a helper (\f(CW\*(C`%{make}\*(C'\fR) for the \f(CW\*(C`make\*(C'\fR that is used by Perl and
ExtUtils::MakeMaker (\s-1EUMM\s0).  Unfortunately the \f(CW\*(C`make\*(C'\fR supported by Perl and \s-1EUMM\s0 on
Windows (\f(CW\*(C`nmake\*(C'\fR and \f(CW\*(C`dmake\*(C'\fR) are not widely supported by most open source projects.
(Thankfully recent perls and \s-1EUMM\s0 support \s-1GNU\s0 Make on windows now).
.PP
You can use the \f(CW\*(C`make\*(C'\fR plugin (Alien::Build::Plugin::Build::Make) to tell the
Alien::Build system know which make the project that you are alienizing requires.
.PP
.Vb 9
\& plugin \*(AqBuild::Make\*(Aq => \*(Aqumake\*(Aq;
\& # umake makes %{make} either GNU Make or BSD Make on Unix and GNU Make on Windows.
\& build {
\&   build [
\&     # You can use the Perl config compiler and cflags using the %{perl.config...} helper
\&     [ \*(Aq%{make}\*(Aq, \*(AqCC=%{perl.config.cc}\*(Aq, \*(AqCFLAGS=%{perl.config.cccdlflags} %{perl.config.optimize}\*(Aq ],
\&     [ \*(Aq%{make}\*(Aq, \*(Aqinstall\*(Aq, \*(AqPREFIX=%{.install.prefix}\*(Aq ],
\&   ],
\& };
.Ve
.PP
Some open source projects require \s-1GNU\s0 Make, and you can specify that, and Alien::gmake
will be pulled in on platforms that do not already have it.
.PP
.Vb 2
\& plugin \*(AqBuild::Make\*(Aq => \*(Aqgmake\*(Aq;
\& ...
.Ve
.SS "How do I probe for a package that uses pkg-config"
.IX Subsection "How do I probe for a package that uses pkg-config"
Use the \f(CW\*(C`pkg\-config\*(C'\fR plugin (Alien::Build::Plugin::PkgConfig::Negotiate):
.PP
.Vb 4
\& use alienfile;
\& plugin \*(AqPkgConfig\*(Aq => (
\&   pkg_name => \*(Aqlibfoo\*(Aq,
\& );
.Ve
.PP
It will probe for a system version of the library.  It will also add the appropriate \f(CW\*(C`version\*(C'\fR
\&\f(CW\*(C`cflags\*(C'\fR and \f(CW\*(C`libs\*(C'\fR properties on either a \f(CW\*(C`system\*(C'\fR or \f(CW\*(C`share\*(C'\fR install.
.SS "How do I specify a minimum or exact version requirement for packages that use pkg-config?"
.IX Subsection "How do I specify a minimum or exact version requirement for packages that use pkg-config?"
The various pkg-config plugins all support atleast_version, exact_version and maximum_version
fields, which have the same meaning as the \f(CW\*(C`pkg\-config\*(C'\fR command line interface:
.PP
.Vb 1
\& use alienfile;
\& 
\& plugin \*(AqPkgConfig\*(Aq, pkg_name => foo, atleast_version => \*(Aq1.2.3\*(Aq;
.Ve
.PP
or
.PP
.Vb 1
\& use alienfile;
\& 
\& plugin \*(AqPkgConfig\*(Aq, pkg_name => foo, exact_version => \*(Aq1.2.3\*(Aq;
.Ve
.SS "How to create an Alien module for a packages that do not support pkg-config?"
.IX Subsection "How to create an Alien module for a packages that do not support pkg-config?"
\fIPackages that provide a configuration script\fR
.IX Subsection "Packages that provide a configuration script"
.PP
Many packages provide a command that you can use to get the appropriate version, compiler
and linker flags.  For those packages you can just use the commands in your alienfile.
Something like this:
.PP
.Vb 1
\& use alienfile;
\& 
\& probe [ \*(Aqfoo\-config \-\-version\*(Aq ];
\& 
\& share {
\&   ...
\& 
\&   build [
\&     \*(Aq%{make} PREFIX=%{.runtime.prefix}\*(Aq,
\&     \*(Aq%{amek} install PREFIX=%{.runtime.prefix}\*(Aq,
\&   ];
\& };
\& 
\& gather [
\&   [ \*(Aqfoo\-config\*(Aq, \*(Aq\-\-version\*(Aq, \e\*(Aq%{.runtime.version}\*(Aq ],
\&   [ \*(Aqfoo\-config\*(Aq, \*(Aq\-\-cflags\*(Aq,  \e\*(Aq%{.runtime.cflags}\*(Aq  ],
\&   [ \*(Aqfoo\-config\*(Aq, \*(Aq\-\-libs\*(Aq,    \e\*(Aq%{.runtime.libs}\*(Aq    ],
\& ];
.Ve
.PP
\fIPackages that require a compile test\fR
.IX Subsection "Packages that require a compile test"
.PP
Some packages just expect you do know that \f(CW\*(C`\-lfoo\*(C'\fR will work.  For those you can use
the \f(CW\*(C`cbuilder\*(C'\fR plugin (Alien::Build::Plugin::Probe::CBuilder.
.PP
.Vb 5
\& use alienfile;
\& plugin \*(AqProbe::CBuilder\*(Aq => (
\&   cflags => \*(Aq\-I/opt/libfoo/include\*(Aq,
\&   libs   => \*(Aq\-L/opt/libfoo/lib \-lfoo\*(Aq,
\& );
\& 
\& share {
\&   ...
\&   gather sub {
\&     my($build) = @_;
\&     my $prefix = $build\->runtime_prop\->{prefix};
\&     $build\->runtime_prop\->{cflags} = "\-I$prefix/include ";
\&     $build\->runtime_prop\->{libs}   = "\-L$prefix/lib \-lfoo ";
\&   };
\& }
.Ve
.PP
This plugin will build a small program with these flags and test that it works.  (There
are also options to provide a program that can make simple tests to ensure the library
works).  If the probe works, it will set the compiler and linker flags.  (There are also
options for extracting the version from the test program).  If you do a share install
you will need to set the compiler and linker flags yourself in the gather step, if you
aren't using a build plugin that will do that for you.
.SS "Can/Should I write a tool oriented Alien module?"
.IX Subsection "Can/Should I write a tool oriented Alien module?"
Certainly.  The original intent was to provide libraries, but tools are also quite doable using
the Alien::Build toolset.  A good example of how to do this is Alien::nasm.  You will want
to use the 'Probe::CommandLine':
.PP
.Vb 1
\& use alienfile;
\& 
\& plugin \*(AqProbe::CommandLine\*(Aq => (
\&   command => \*(Aqgzip\*(Aq,
\& );
.Ve
.SS "How do I test my package once it is built (before it is installed)?"
.IX Subsection "How do I test my package once it is built (before it is installed)?"
Use Test::Alien.  It has extensive documentation, and integrates nicely with Alien::Base.
.SS "How do I patch packages that need alterations?"
.IX Subsection "How do I patch packages that need alterations?"
If you have a diff file you can use patch:
.PP
.Vb 1
\& use alienfile;
\& 
\& probe sub { \*(Aqshare\*(Aq }; # replace with appropriate probe
\& 
\& share {
\&   ...
\&   patch [ \*(Aq%{patch} \-p1 < %{.install.patch}/mypatch.diff\*(Aq ];
\&   build [ ... ] ;
\& }
\& 
\& ...
.Ve
.PP
You can also patch using Perl if that is easier:
.PP
.Vb 1
\& use alienfile;
\& 
\& probe sub { \*(Aqshare\*(Aq };
\& 
\& share {
\&   ...
\&   patch sub {
\&     my($build) = @_;
\&     # make changes to source prior to build
\&   };
\&   build [ ... ];
\& };
.Ve
.SS "The flags that a plugin produces are wrong!"
.IX Subsection "The flags that a plugin produces are wrong!"
Sometimes, the compiler or linker flags that the PkgConfig plugin comes up with are not quite
right.  (Frequently this is actually because a package maintainer is providing a broken
\&\f(CW\*(C`.pc\*(C'\fR file).  (Other plugins may also have problems).  You could replace the plugin's \f(CW\*(C`gather\*(C'\fR step
but a better way is to provide a subroutine callback to be called after the gather stage
is complete.  You can do this with the alienfile \f(CW\*(C`after\*(C'\fR directive:
.PP
.Vb 1
\& use alienfile;
\& 
\& plugin \*(AqPlgConfig\*(Aq => \*(Aqlibfoo\*(Aq;
\& 
\& share {
\&   ...
\&   after \*(Aqgather\*(Aq => sub {
\&     my($build) = @_;
\&     $build\->runtime_prop\->{libs}        .= " \-lbar";        # libfoo also requires libbar
\&     $build\->runtime_prop\->{libs_static} .= " \-lbar \-lbaz";  # libfoo also requires libbaz under static linkage
\&   };
\& };
.Ve
.PP
Sometimes you only need to do this on certain platforms.  You can adjust the logic based on \f(CW$^O\fR
appropriately.
.PP
.Vb 1
\& use alienfile;
\& 
\& plugin \*(AqPlgConfig\*(Aq => \*(Aqlibfoo\*(Aq;
\& 
\& share {
\&   ...
\&   after \*(Aqgather\*(Aq => sub {
\&     my($build) = @_;
\&     if($^O eq \*(AqMSWin32\*(Aq) {
\&       $build\->runtime_prop\->{libs} .= " \-lpsapi";
\&     }
\&   };
\& };
.Ve
.SS "599 Internal Exception errors downloading packages from the internet"
.IX Subsection "599 Internal Exception errors downloading packages from the internet"
.Vb 6
\& Alien::Build::Plugin::Fetch::HTTPTiny> 599 Internal Exception fetching http://dist.libuv.org/dist/v1.15.0
\& Alien::Build::Plugin::Fetch::HTTPTiny> exception: IO::Socket::SSL 1.42 must be installed for https support
\& Alien::Build::Plugin::Fetch::HTTPTiny> exception: Net::SSLeay 1.49 must be installed for https support
\& Alien::Build::Plugin::Fetch::HTTPTiny> An attempt at a SSL URL https was made, but your HTTP::Tiny does not appear to be able to use https.
\& Alien::Build::Plugin::Fetch::HTTPTiny> Please see: https://metacpan.org/pod/Alien::Build::Manual::FAQ#599\-Internal\-Exception\-errors\-downloading\-packages\-from\-the\-internet
\& error fetching http://dist.libuv.org/dist/v1.15.0: 599 Internal Exception at /Users/ollisg/.perlbrew/libs/perl\-5.26.0@test1/lib/perl5/Alien/Build/Plugin/Fetch/HTTPTiny.pm line 68.
.Ve
.PP
(Older versions of Alien::Build produced a less verbose more confusing version of this diagnostic).
.PP
\&\s-1TL\s0;DR, instead of this:
.PP
.Vb 4
\& share {
\&   start_url => \*(Aqhttp://example.org/dist\*(Aq;
\&   ...
\& };
.Ve
.PP
do this:
.PP
.Vb 3
\& share {
\&   start_url => \*(Aqhttps://example.org/dist\*(Aq;
\& };
.Ve
.PP
If the website is going to redirect to a secure \s-1URL\s0 anyway.
.PP
The \*(L"599 Internal Exception\*(R" indicates an \*(L"internal\*(R" exception from HTTP::Tiny and is not a real
\&\s-1HTTP\s0 status code or error.  This could mean a number of different problems, but most frequently
indicates that a \s-1SSL\s0 request was made without the required modules (Net::SSLeay and
IO::Socket::SSL).  Normally the Alien::Build::Plugin::Download::Negotiate
and Alien::Build::Plugin::Fetch::HTTPTiny will make sure that the appropriate modules are added
to your prerequisites for you if you specify a \f(CW\*(C`https\*(C'\fR \s-1URL\s0.  Some websites allow an initial request
from \f(CW\*(C`http\*(C'\fR but then redirect to \f(CW\*(C`https\*(C'\fR.  If you can it is better to specify \f(CW\*(C`https\*(C'\fR, if you
cannot, then you can instead use the \f(CW\*(C`ssl\*(C'\fR property on either of those two plugins.
.SS "Network fetch is turned off"
.IX Subsection "Network fetch is turned off"
If you get an error like this:
.PP
.Vb 2
\& Alien::Build> install type share requested or detected, but network fetch is turned off
\& Alien::Build> see see https://metacpan.org/pod/Alien::Build::Manual::FAQ#Network\-fetch\-is\-turned\-off
.Ve
.PP
This is because your environment is setup not to install aliens that require the network.  You
can turn network fetch back on by setting \f(CW\*(C`ALIEN_INSTALL_NETWORK\*(C'\fR to true, or by unsetting it.
This environment variable is designed for environments that don't ever want to install aliens that
require downloading source packages over the internet.
.SS "I would really prefer you not download stuff off the internet"
.IX Subsection "I would really prefer you not download stuff off the internet"
The idea of Alien is to download missing packages and build them automatically to make installing
easier.  Some people may not like this, or may even have security requirements that they not download
random package over the internet (caveat, downloading random stuff off of \s-1CPAN\s0 may not be any safer,
so make sure you audit all of the open source software that you use appropriately).  Another reason
you may not want to download from the internet is if you are packaging up an alien for an operating
system vendor, which will always want to use the system version of a library.  In that situation you
don't want Alien::Build to go off and download something from the internet because the probe failed
for some reason.
.PP
This is easy to take care of, simply set \f(CW\*(C`ALIEN_INSTALL_TYPE\*(C'\fR to \f(CW\*(C`system\*(C'\fR and a build from source
code will never be attempted.  On systems that do not provide system versions of the library or tool
you will get an error, allowing you to install the library, and retry the alien install.  You can
also set the environment variable on just some aliens.
.PP
.Vb 1
\& % export ALIEN_INSTALL_TYPE=system  # for everyone
\& 
\& % env ALIEN_INSTALL_TYPE=system cpanm \-v Alien::libfoo
.Ve
.SS "For testing I would like to test both system and share installs!"
.IX Subsection "For testing I would like to test both system and share installs!"
You can use the \f(CW\*(C`ALIEN_INSTALL_TYPE\*(C'\fR environment variable.  It will force either a \f(CW\*(C`share\*(C'\fR or
\&\f(CW\*(C`system\*(C'\fR install depending on how it is set.  For travis you can do something like this:
.PP
.Vb 4
\& env:
\&   matrix:
\&     \- ALIEN_INSTALL_TYPE=share
\&     \- ALIEN_INSTALL_TYPE=system
.Ve
.SS "How do I use Alien::Build from Dist::Zilla?"
.IX Subsection "How do I use Alien::Build from Dist::Zilla?"
For creating Alien::Base and Alien::Build based dist from Dist::Zilla you can use the
dzil plugin Dist::Zilla::Plugin::AlienBuild.
.SS "Cannot find either a share directory or a ConfigData module"
.IX Subsection "Cannot find either a share directory or a ConfigData module"
If you see an error like this:
.PP
.Vb 4
\& Cannot find either a share directory or a ConfigData module for Alien::libfoo.
\& (Alien::libfoo loaded from lib/Alien/libfoo.pm)
\& Please see https://metacpan.org/pod/distribution/Alien\-Build/lib/Alien/Build/Manual/FAQ.pod#Cannot\-find\-either\-a\-share\-directory\-or\-a\-ConfigData\-module
\& Can\*(Aqt locate Alien/libfoo/ConfigData.pm in @INC (you may need to install the Alien::libfoo::ConfigData module) (@INC contains: ...)
.Ve
.PP
it means you are trying to use an Alien that hasn't been properly installed.  An Alien::Base
based Alien needs to have either the share directory build during the install process or for
older legacy Alien::Base::ModuleBuild based Aliens, a ConfigData module generated by
Module::Build.
.PP
This usually happens if you try to use an Alien module from the lib directory as part of the
Alien's distribution.  You need to build the alien and use \f(CW\*(C`blib/lib\*(C'\fR instead of \f(CW\*(C`lib\*(C'\fR or
install the alien and use the installed path.
.PP
It is also possible that your Alien installer is not set up correctly.  Make sure your
\&\f(CW\*(C`Makefile.PL\*(C'\fR is using Alien::Build::MM correctly.
.SS "I have a question not listed here!"
.IX Subsection "I have a question not listed here!"
There are a number of forums available to people working on Alien, Alien::Base and
Alien::Build modules:
.ie n .IP """#native"" on irc.perl.org" 4
.el .IP "\f(CW#native\fR on irc.perl.org" 4
.IX Item "#native on irc.perl.org"
This is intended for native interfaces in general so is a good place for questions about Alien
generally or Alien::Base and Alien::Build specifically.
.IP "mailing list" 4
.IX Item "mailing list"
The \f(CW\*(C`perl5\-alien\*(C'\fR google group is intended for Alien issues generally, including Alien::Base
and Alien::Build.
.Sp
https://groups.google.com/forum/#!forum/perl5\-alien <https://groups.google.com/forum/#!forum/perl5-alien>
.IP "Open a support ticket" 4
.IX Item "Open a support ticket"
If you have an issue with Alie::Build itself, then please open a support ticket on the project's GitHub issue 
tracker.
.Sp
https://github.com/plicease/Alien\-Build/issues <https://github.com/plicease/Alien-Build/issues>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Alien::Build, Alien::Build::MM, Alien::Build::Plugin, alienfile
.SH "AUTHOR"
.IX Header "AUTHOR"
Author: Graham Ollis <plicease@cpan.org>
.PP
Contributors:
.PP
Diab Jerius (\s-1DJERIUS\s0)
.PP
Roy Storey (\s-1KIWIROY\s0)
.PP
Ilya Pavlov
.PP
David Mertens (run4flat)
.PP
Mark Nunberg (mordy, mnunberg)
.PP
Christian Walde (Mithaldu)
.PP
Brian Wightman (MidLifeXis)
.PP
Zaki Mughal (zmughal)
.PP
mohawk (mohawk2, \s-1ETJ\s0)
.PP
Vikas N Kumar (vikasnkumar)
.PP
Flavio Poletti (polettix)
.PP
Salvador Fandiño (salva)
.PP
Gianni Ceccarelli (dakkar)
.PP
Pavel Shaydo (zwon, trinitum)
.PP
Kang-min Liu (劉康民, gugod)
.PP
Nicholas Shipp (nshp)
.PP
Juan Julián Merelo Guervós (\s-1JJ\s0)
.PP
Joel Berger (\s-1JBERGER\s0)
.PP
Petr Pisar (ppisar)
.PP
Lance Wicks (\s-1LANCEW\s0)
.PP
Ahmad Fatoum (a3f, \s-1ATHREEF\s0)
.PP
José Joaquín Atria (\s-1JJATRIA\s0)
.PP
Duke Leto (\s-1LETO\s0)
.PP
Shoichi Kaji (\s-1SKAJI\s0)
.PP
Shawn Laffan (\s-1SLAFFAN\s0)
.PP
Paul Evans (leonerd, \s-1PEVANS\s0)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011\-2019 by Graham Ollis.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Alien::Base 3"
.TH Alien::Base 3 "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Alien::Base \- Base classes for Alien:: modules
.SH "VERSION"
.IX Header "VERSION"
version 1.85
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package Alien::MyLibrary;
\& 
\& use strict;
\& use warnings;
\& 
\& use parent \*(AqAlien::Base\*(Aq;
\& 
\& 1;
.Ve
.PP
(for details on the \f(CW\*(C`Makefile.PL\*(C'\fR or \f(CW\*(C`Build.PL\*(C'\fR and alienfile
that should be bundled with your Alien::Base subclass, please see
Alien::Build::Manual::AlienAuthor).
.PP
Then a \f(CW\*(C`MyLibrary::XS\*(C'\fR can use \f(CW\*(C`Alien::MyLibrary\*(C'\fR in its \f(CW\*(C`Makefile.PL\*(C'\fR:
.PP
.Vb 4
\& use Alien::MyLibrary
\& use ExtUtils::MakeMaker;
\& use Alien::Base::Wrapper qw( Alien::MyLibrary !export );
\& use Config;
\& 
\& WriteMakefile(
\&   ...
\&   Alien::Base::Wrapper\->mm_args,
\&   ...
\& );
.Ve
.PP
Or if you prefer Module::Build, in its \f(CW\*(C`Build.PL\*(C'\fR:
.PP
.Vb 3
\& use Alien::MyLibrary;
\& use Module::Build 0.28; # need at least 0.28
\& use Alien::Base::Wrapper qw( Alien::MyLibrary !export );
\& 
\& my $builder = Module::Build\->new(
\&   ...
\&   Alien::Base::Wrapper\->mb_args,
\&   ...
\& );
\& 
\& $builder\->create_build_script;
.Ve
.PP
Or if you are using ExtUtils::Depends:
.PP
.Vb 7
\& use ExtUtils::MakeMaker;
\& use ExtUtils::Depends;
\& my $eud = ExtUtils::Depends\->new(qw( MyLibrary::XS Alien::MyLibrary ));
\& WriteMakefile(
\&   ...
\&   $eud\->get_makefile_vars
\& );
.Ve
.PP
If you are using <Alien:Base::ModuleBuild> instead of the recommended Alien::Build
and alienfile, then in your \f(CW\*(C`MyLibrary::XS\*(C'\fR module, you may need something like
this in your main \f(CW\*(C`.pm\*(C'\fR file \s-1IF\s0 your library uses dynamic libraries:
.PP
.Vb 1
\& package MyLibrary::XS;
\& 
\& use Alien::MyLibrary; # may only be needed if you are using Alien::Base::ModuleBuild
\& 
\& ...
.Ve
.PP
Or you can use it from an \s-1FFI\s0 module:
.PP
.Vb 1
\& package MyLibrary::FFI;
\& 
\& use Alien::MyLibrary;
\& use FFI::Platypus;
\& 
\& my $ffi = FFI::Platypus\->new;
\& $ffi\->lib(Alien::MyLibrary\->dynamic_libs);
\& 
\& $ffi\->attach( \*(Aqmy_library_function\*(Aq => [] => \*(Aqvoid\*(Aq );
.Ve
.PP
You can even use it with Inline (C and \*(C+ languages are supported):
.PP
.Vb 1
\& package MyLibrary::Inline;
\& 
\& use Alien::MyLibrary;
\& # Inline 0.56 or better is required
\& use Inline 0.56 with => \*(AqAlien::MyLibrary\*(Aq;
\& ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1NOTE\s0\fR: Alien::Base::ModuleBuild is no longer bundled with Alien::Base and has been spun off into a separate distribution.
Alien::Build::ModuleBuild will be a prerequisite for Alien::Base until October 1, 2017.  If you are using Alien::Base::ModuleBuild
you need to make sure it is declared as a \f(CW\*(C`configure_requires\*(C'\fR in your \f(CW\*(C`Build.PL\*(C'\fR.  You may want to also consider using Alien::Base and
alienfile as a more modern alternative.
.PP
Alien::Base comprises base classes to help in the construction of \f(CW\*(C`Alien::\*(C'\fR modules. Modules in the Alien namespace are used to locate and install (if necessary) external libraries needed by other Perl modules.
.PP
This is the documentation for the Alien::Base module itself. If you
are starting out you probably want to do so from one of these documents:
.IP "Alien::Build::Manual::AlienUser" 4
.IX Item "Alien::Build::Manual::AlienUser"
For users of an \f(CW\*(C`Alien::libfoo\*(C'\fR that is implemented using Alien::Base.
(The developer of \f(CW\*(C`Alien::libfoo\*(C'\fR \fIshould\fR provide the documentation
necessary, but if not, this is the place to start).
.IP "Alien::Build::Manual::AlienAuthor" 4
.IX Item "Alien::Build::Manual::AlienAuthor"
If you are writing your own Alien based on Alien::Build and Alien::Base.
.IP "Alien::Build::Manual::FAQ" 4
.IX Item "Alien::Build::Manual::FAQ"
If you have a common question that has already been answered, like
"How do I use alienfile with some build system".
.IP "Alien::Build::Manual::PluginAuthor" 4
.IX Item "Alien::Build::Manual::PluginAuthor"
This is for the brave souls who want to write plugins that will work with
Alien::Build + alienfile.
.SH "METHODS"
.IX Header "METHODS"
In the example snippets here, \f(CW\*(C`Alien::MyLibrary\*(C'\fR represents any
subclass of Alien::Base.
.SS "dist_dir"
.IX Subsection "dist_dir"
.Vb 1
\& my $dir = Alien::MyLibrary\->dist_dir;
.Ve
.PP
Returns the directory that contains the install root for
the packaged software, if it was built from install (i.e., if
\&\f(CW\*(C`install_type\*(C'\fR is \f(CW\*(C`share\*(C'\fR).
.SS "new"
.IX Subsection "new"
.Vb 1
\& my $alien = Alien::MyLibrary\->new;
.Ve
.PP
Creates an instance of an Alien::Base object.  This is typically
unnecessary.
.SS "cflags"
.IX Subsection "cflags"
.Vb 1
\& my $cflags = Alien::MyLibrary\->cflags;
\& 
\& use Text::ParseWords qw( shellwords );
\& my @cflags = shellwords( Alien::MyLibrary\->cflags );
.Ve
.PP
Returns the C compiler flags necessary to compile an \s-1XS\s0
module using the alien software.  If you need this in list
form (for example if you are calling system with a list
argument) you can pass this value into \f(CW\*(C`shellwords\*(C'\fR from
the Perl core Text::ParseWords module.
.SS "cflags_static"
.IX Subsection "cflags_static"
.Vb 1
\& my $cflags = Alien::MyLibrary\->cflags_static;
.Ve
.PP
Same as \f(CW\*(C`cflags\*(C'\fR above, but gets the static compiler flags,
if they are different.
.SS "libs"
.IX Subsection "libs"
.Vb 1
\& my $libs = Alien::MyLibrary\->libs;
\& 
\& use Text::ParseWords qw( shellwords );
\& my @cflags = shellwords( Alien::MyLibrary\->libs );
.Ve
.PP
Returns the library linker flags necessary to link an \s-1XS\s0
module against the alien software.  If you need this in list
form (for example if you are calling system with a list
argument) you can pass this value into \f(CW\*(C`shellwords\*(C'\fR from
the Perl core Text::ParseWords module.
.SS "libs_static"
.IX Subsection "libs_static"
.Vb 1
\& my $libs = Alien::MyLibrary\->libs_static;
.Ve
.PP
Same as \f(CW\*(C`libs\*(C'\fR above, but gets the static linker flags,
if they are different.
.SS "version"
.IX Subsection "version"
.Vb 1
\& my $version = Alien::MyLibrary\->version;
.Ve
.PP
Returns the version of the alienized library or tool that was
determined at install time.
.SS "atleast_version"
.IX Subsection "atleast_version"
.SS "exact_version"
.IX Subsection "exact_version"
.SS "max_version"
.IX Subsection "max_version"
.Vb 3
\& my $ok = Alien::MyLibrary\->atleast_version($wanted_version);
\& my $ok = Alien::MyLibrary\->exact_version($wanted_version);
\& my $ok = Alien::MyLibrary\->max_version($wanted_version);
.Ve
.PP
Returns true if the version of the alienized library or tool is at least,
exactly, or at most the version specified, respectively.
.SS "version_cmp"
.IX Subsection "version_cmp"
.Vb 1
\&  $cmp = Alien::MyLibrary\->version_cmp($x, $y)
.Ve
.PP
Comparison method used by atleast_version, exact_version and
max_version. May be useful to implement custom comparisons, or for
subclasses to overload to get different version comparison semantics than the
default rules, for packages that have some other rules than the \fIpkg-config\fR
behaviour.
.PP
Should return a number less than, equal to, or greater than zero; similar in
behaviour to the \f(CW\*(C`<=>\*(C'\fR and \f(CW\*(C`cmp\*(C'\fR operators.
.SS "install_type"
.IX Subsection "install_type"
.Vb 2
\& my $install_type = Alien::MyLibrary\->install_type;
\& my $bool = Alien::MyLibrary\->install_type($install_type);
.Ve
.PP
Returns the install type that was used when \f(CW\*(C`Alien::MyLibrary\*(C'\fR was
installed.  If a type is provided (the second form in the synopsis)
returns true if the actual install type matches.  Types include:
.IP "system" 4
.IX Item "system"
The library was provided by the operating system
.IP "share" 4
.IX Item "share"
The library was not available when \f(CW\*(C`Alien::MyLibrary\*(C'\fR was installed, so
it was built from source code, either downloaded from the Internet
or bundled with \f(CW\*(C`Alien::MyLibrary\*(C'\fR.
.SS "config"
.IX Subsection "config"
.Vb 1
\& my $value = Alien::MyLibrary\->config($key);
.Ve
.PP
Returns the configuration data as determined during the install
of Alien::MyLibrary.  For the appropriate config keys, see
Alien::Base::ModuleBuild::API#CONFIG\-DATA.
.PP
This is not typically used by Alien::Base and alienfile,
but a compatible interface will be provided.
.SS "dynamic_libs"
.IX Subsection "dynamic_libs"
.Vb 2
\& my @dlls = Alien::MyLibrary\->dynamic_libs;
\& my($dll) = Alien::MyLibrary\->dynamic_libs;
.Ve
.PP
Returns a list of the dynamic library or shared object files for the
alien software.
.SS "bin_dir"
.IX Subsection "bin_dir"
.Vb 1
\& my(@dir) = Alien::MyLibrary\->bin_dir
.Ve
.PP
Returns a list of directories with executables in them.  For a \f(CW\*(C`system\*(C'\fR
install this will be an empty list.  For a \f(CW\*(C`share\*(C'\fR install this will be
a directory under \f(CW\*(C`dist_dir\*(C'\fR named \f(CW\*(C`bin\*(C'\fR if it exists.  You may wish
to override the default behavior if you have executables or scripts that
get installed into non-standard locations.
.PP
Example usage:
.PP
.Vb 1
\& use Env qw( @PATH );
\& 
\& unshft @PATH, Alien::MyLibrary\->bin_dir;
.Ve
.SS "alien_helper"
.IX Subsection "alien_helper"
.Vb 1
\& my $helpers = Alien::MyLibrary\->alien_helper;
.Ve
.PP
Returns a hash reference of helpers provided by the Alien module.
The keys are helper names and the values are code references.  The
code references will be executed at command time and the return value
will be interpolated into the command before execution.  The default
implementation returns an empty hash reference, and you are expected
to override the method to create your own helpers.
.PP
For use with commands specified in and alienfile or in your \f(CW\*(C`Build.Pl\*(C'\fR
when used with Alien::Base::ModuleBuild.
.PP
Helpers allow users of your Alien module to use platform or environment
determined logic to compute command names or arguments in your installer
logic.  Helpers allow you to do this without making your Alien module a
requirement when a build from source code is not necessary.
.PP
As a concrete example, consider Alien::gmake, which provides the
helper \f(CW\*(C`gmake\*(C'\fR:
.PP
.Vb 1
\& package Alien::gmake;
\& 
\& ...
\& 
\& sub alien_helper {
\&   my($class) = @_;
\&   return {
\&     gmake => sub {
\&       # return the executable name for GNU make,
\&       # usually either make or gmake depending on
\&       # the platform and environment
\&       $class\->exe;
\&     }
\&   },
\& }
.Ve
.PP
Now consider Alien::nasm.  \f(CW\*(C`nasm\*(C'\fR requires \s-1GNU\s0 Make to build from
source code, but if the system \f(CW\*(C`nasm\*(C'\fR package is installed we don't
need it.  From the alienfile of \f(CW\*(C`Alien::nasm\*(C'\fR:
.PP
.Vb 1
\& use alienfile;
\& 
\& plugin \*(AqProbe::CommandLine\*(Aq => (
\&   command => \*(Aqnasm\*(Aq,
\&   args    => [\*(Aq\-v\*(Aq],
\&   match   => qr/NASM version/,
\& );
\& 
\& share {
\&   ...
\&   plugin \*(AqExtract\*(Aq => \*(Aqtar.gz\*(Aq;
\&   plugin \*(AqBuild::MSYS\*(Aq;
\& 
\&   build [
\&     \*(Aqsh configure \-\-prefix=%{alien.install.prefix}\*(Aq,
\&     \*(Aq%{gmake}\*(Aq,
\&     \*(Aq%{gmake} install\*(Aq,
\&   ];
\& };
\& 
\& ...
.Ve
.SS "inline_auto_include"
.IX Subsection "inline_auto_include"
.Vb 1
\& my(@headers) = Alien::MyLibrary\->inline_auto_include;
.Ve
.PP
List of header files to automatically include in inline C and \*(C+
code when using Inline::C or Inline::CPP.  This is provided
as a public interface primarily so that it can be overridden at run
time.  This can also be specified in your \f(CW\*(C`Build.PL\*(C'\fR with
Alien::Base::ModuleBuild using the \f(CW\*(C`alien_inline_auto_include\*(C'\fR
property.
.SS "runtime_prop"
.IX Subsection "runtime_prop"
.Vb 1
\& my $hashref = Alien::MyLibrary\->runtime_prop;
.Ve
.PP
Returns a hash reference of the runtime properties computed by Alien::Build during its
install process.  If the Alien::Base based Alien was not built using Alien::Build,
then this will return undef.
.SS "alt"
.IX Subsection "alt"
.Vb 2
\& my $new_alien = Alien::MyLibrary\->alt($alt_name);
\& my $new_alien = $old_alien\->alt($alt_name);
.Ve
.PP
Returns an Alien::Base instance with the alternate configuration.
.PP
Some packages come with multiple libraries, and multiple \f(CW\*(C`.pc\*(C'\fR files to
use with them.  This method can be used with \f(CW\*(C`pkg\-config\*(C'\fR plugins to
access different configurations.  (It could also be used with non-pkg-config
based packages too, though there are not as of this writing any build
time plugins that take advantage of this feature).
.PP
From your alienfile
.PP
.Vb 1
\& use alienfile;
\& 
\& plugin \*(AqPkgConfig\*(Aq => (
\&   pkg_name => [ \*(Aqlibfoo\*(Aq, \*(Aqlibbar\*(Aq, ],
\& );
.Ve
.PP
Then in your base class:
.PP
.Vb 1
\& package Alien::MyLibrary;
\& 
\& use base qw( Alien::Base );
\& use Role::Tiny::With qw( with );
\& 
\& with \*(AqAlien::Role::Alt\*(Aq;
\& 
\& 1;
.Ve
.PP
Then you can use it:
.PP
.Vb 1
\& use Alien::MyLibrary;
\& 
\& my $cflags = Alien::MyLibrary\->alt(\*(Aqfoo1\*(Aq)\->cflags;
\& my $libs   = Alien::MyLibrary\->alt(\*(Aqfoo1\*(Aq)\->libs;
.Ve
.SS "alt_names"
.IX Subsection "alt_names"
.Vb 1
\& my @alt_names = Alien::MyLibrary\->alt_names
.Ve
.PP
Returns the list of all available alternative configuration names.
.SS "alt_exists"
.IX Subsection "alt_exists"
.Vb 1
\& my $bool = Alien::MyLibrary\->alt_exists($alt_name)
.Ve
.PP
Returns true if the given alternative configuration exists.
.SH "SUPPORT AND CONTRIBUTING"
.IX Header "SUPPORT AND CONTRIBUTING"
First check the Alien::Build::Manual::FAQ for questions that have already been answered.
.PP
\&\s-1IRC:\s0 #native on irc.perl.org
.PP
(click for instant chatroom login) <http://chat.mibbit.com/#native@irc.perl.org>
.PP
If you find a bug, please report it on the projects issue tracker on GitHub:
.IP "https://github.com/Perl5\-Alien/Alien\-Base/issues <https://github.com/Perl5-Alien/Alien-Base/issues>" 4
.IX Item "https://github.com/Perl5-Alien/Alien-Base/issues <https://github.com/Perl5-Alien/Alien-Base/issues>"
.PP
Development is discussed on the projects google groups.  This is also
a reasonable place to post a question if you don't want to open an issue
in GitHub.
.IP "https://groups.google.com/forum/#!forum/perl5\-alien <https://groups.google.com/forum/#!forum/perl5-alien>" 4
.IX Item "https://groups.google.com/forum/#!forum/perl5-alien <https://groups.google.com/forum/#!forum/perl5-alien>"
.PP
If you have implemented a new feature or fixed a bug, please open a pull
request.
.IP "https://github.com/Perl5\-Alien/Alien\-Base/pulls <https://github.com/Perl5-Alien/Alien-Base/pulls>" 4
.IX Item "https://github.com/Perl5-Alien/Alien-Base/pulls <https://github.com/Perl5-Alien/Alien-Base/pulls>"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.PD 0
.IP "\(bu" 4
.PD
Alien::Build
.IP "\(bu" 4
alienfile
.IP "\(bu" 4
Alien
.IP "\(bu" 4
Alien::Build::Manual::FAQ
.SH "THANKS"
.IX Header "THANKS"
\&\f(CW\*(C`Alien::Base\*(C'\fR was originally written by Joel Berger, and that
code is still Copyright (C) 2012\-2017 Joel Berger.  It has the
same license as the rest of the Alien::Build.
.PP
Special thanks for the early development of \f(CW\*(C`Alien::Base\*(C'\fR go to:
.IP "Christian Walde (Mithaldu)" 4
.IX Item "Christian Walde (Mithaldu)"
For productive conversations about component interoperability.
.IP "kmx" 4
.IX Item "kmx"
For writing Alien::Tidyp from which I drew many of my initial ideas.
.IP "David Mertens (run4flat)" 4
.IX Item "David Mertens (run4flat)"
For productive conversations about implementation.
.IP "Mark Nunberg (mordy, mnunberg)" 4
.IX Item "Mark Nunberg (mordy, mnunberg)"
For graciously teaching me about rpath and dynamic loading,
.SH "AUTHOR"
.IX Header "AUTHOR"
Author: Graham Ollis <plicease@cpan.org>
.PP
Contributors:
.PP
Diab Jerius (\s-1DJERIUS\s0)
.PP
Roy Storey (\s-1KIWIROY\s0)
.PP
Ilya Pavlov
.PP
David Mertens (run4flat)
.PP
Mark Nunberg (mordy, mnunberg)
.PP
Christian Walde (Mithaldu)
.PP
Brian Wightman (MidLifeXis)
.PP
Zaki Mughal (zmughal)
.PP
mohawk (mohawk2, \s-1ETJ\s0)
.PP
Vikas N Kumar (vikasnkumar)
.PP
Flavio Poletti (polettix)
.PP
Salvador Fandiño (salva)
.PP
Gianni Ceccarelli (dakkar)
.PP
Pavel Shaydo (zwon, trinitum)
.PP
Kang-min Liu (劉康民, gugod)
.PP
Nicholas Shipp (nshp)
.PP
Juan Julián Merelo Guervós (\s-1JJ\s0)
.PP
Joel Berger (\s-1JBERGER\s0)
.PP
Petr Pisar (ppisar)
.PP
Lance Wicks (\s-1LANCEW\s0)
.PP
Ahmad Fatoum (a3f, \s-1ATHREEF\s0)
.PP
José Joaquín Atria (\s-1JJATRIA\s0)
.PP
Duke Leto (\s-1LETO\s0)
.PP
Shoichi Kaji (\s-1SKAJI\s0)
.PP
Shawn Laffan (\s-1SLAFFAN\s0)
.PP
Paul Evans (leonerd, \s-1PEVANS\s0)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011\-2019 by Graham Ollis.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

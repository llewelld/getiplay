.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Alien::Build::Plugin::Download::Negotiate 3"
.TH Alien::Build::Plugin::Download::Negotiate 3 "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Alien::Build::Plugin::Download::Negotiate \- Download negotiation plugin
.SH "VERSION"
.IX Header "VERSION"
version 1.85
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\& use alienfile;
\& share {
\&   start_url \*(Aqhttp://ftp.gnu.org/gnu/make\*(Aq;
\&   plugin \*(AqDownload\*(Aq => (
\&     filter => qr/^make\-.*\e.tar\e.gz$/,
\&     version => qr/([0\-9\e.]+)/,
\&   );
\& };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a negotiator plugin for downloading packages from the internet.  This
plugin picks the best Fetch, Decode and Prefer plugins to do the actual work.
Which plugins are picked depend on the properties you specify, your platform
and environment.  It is usually preferable to use a negotiator plugin rather
than the Fetch, Decode and Prefer plugins directly from your alienfile.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.SS "url"
.IX Subsection "url"
[\s-1DEPRECATED\s0] use \f(CW\*(C`start_url\*(C'\fR instead.
.PP
The Initial \s-1URL\s0 for your package.  This may be a directory listing (either in
\&\s-1HTML\s0 or ftp listing format) or the final tarball intended to be downloaded.
.SS "filter"
.IX Subsection "filter"
This is a regular expression that lets you filter out files that you do not
want to consider downloading.  For example, if the directory listing contained
tarballs and readme files like this:
.PP
.Vb 2
\& foo\-1.0.0.tar.gz
\& foo\-1.0.0.readme
.Ve
.PP
You could specify a filter of \f(CW\*(C`qr/\e.tar\e.gz$/\*(C'\fR to make sure only tarballs are
considered for download.
.SS "version"
.IX Subsection "version"
Regular expression to parse out the version from a filename.  The regular expression
should store the result in \f(CW$1\fR.
.PP
Note: if you provide a \f(CW\*(C`version\*(C'\fR property, this plugin will assume that you will
be downloading an initial index to select package downloads from.  Depending on
the protocol (and typically this is the case for http and \s-1HTML\s0) that may bring in
additional dependencies.  If start_url points to a tarball or other archive directly
(without needing to do through an index selection process), it is recommended that
you not specify this property.
.SS "ssl"
.IX Subsection "ssl"
If your initial \s-1URL\s0 does not need \s-1SSL\s0, but you know ahead of time that a subsequent
request will need it (for example, if your directory listing is on \f(CW\*(C`http\*(C'\fR, but includes
links to \f(CW\*(C`https\*(C'\fR URLs), then you can set this property to true, and the appropriate
Perl \s-1SSL\s0 modules will be loaded.
.SS "passive"
.IX Subsection "passive"
If using \s-1FTP\s0, attempt a passive mode transfer first, before trying an active mode transfer.
.SS "bootstrap_ssl"
.IX Subsection "bootstrap_ssl"
If set to true, then the download negotiator will avoid using plugins that have a dependency
on Net::SSLeay, or other Perl \s-1SSL\s0 modules.  The intent for this option is to allow
OpenSSL to be alienized and be a useful optional dependency for Net::SSLeay.
.PP
The implementation may improve over time, but as of this writing, this option relies on you
having a working \f(CW\*(C`curl\*(C'\fR or \f(CW\*(C`wget\*(C'\fR with \s-1SSL\s0 support in your \f(CW\*(C`PATH\*(C'\fR.
.SS "prefer"
.IX Subsection "prefer"
How to sort candidates for selection.  This should be one of three types of values:
.IP "code reference" 4
.IX Item "code reference"
This will be used as the prefer hook.
.IP "true value" 4
.IX Item "true value"
Use Alien::Build::Plugin::Prefer::SortVersions.
.IP "false value" 4
.IX Item "false value"
Don't set any preference at all.  A hook must be installed, or another prefer plugin specified.
.SS "decoder"
.IX Subsection "decoder"
Override the detected decoder.
.SH "METHODS"
.IX Header "METHODS"
.SS "pick"
.IX Subsection "pick"
.Vb 1
\& my($fetch, @decoders) = $plugin\->pick;
.Ve
.PP
Returns the fetch plugin and any optional decoders that should be used.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Alien::Build, alienfile, Alien::Build::MM, Alien
.SH "AUTHOR"
.IX Header "AUTHOR"
Author: Graham Ollis <plicease@cpan.org>
.PP
Contributors:
.PP
Diab Jerius (\s-1DJERIUS\s0)
.PP
Roy Storey (\s-1KIWIROY\s0)
.PP
Ilya Pavlov
.PP
David Mertens (run4flat)
.PP
Mark Nunberg (mordy, mnunberg)
.PP
Christian Walde (Mithaldu)
.PP
Brian Wightman (MidLifeXis)
.PP
Zaki Mughal (zmughal)
.PP
mohawk (mohawk2, \s-1ETJ\s0)
.PP
Vikas N Kumar (vikasnkumar)
.PP
Flavio Poletti (polettix)
.PP
Salvador Fandiño (salva)
.PP
Gianni Ceccarelli (dakkar)
.PP
Pavel Shaydo (zwon, trinitum)
.PP
Kang-min Liu (劉康民, gugod)
.PP
Nicholas Shipp (nshp)
.PP
Juan Julián Merelo Guervós (\s-1JJ\s0)
.PP
Joel Berger (\s-1JBERGER\s0)
.PP
Petr Pisar (ppisar)
.PP
Lance Wicks (\s-1LANCEW\s0)
.PP
Ahmad Fatoum (a3f, \s-1ATHREEF\s0)
.PP
José Joaquín Atria (\s-1JJATRIA\s0)
.PP
Duke Leto (\s-1LETO\s0)
.PP
Shoichi Kaji (\s-1SKAJI\s0)
.PP
Shawn Laffan (\s-1SLAFFAN\s0)
.PP
Paul Evans (leonerd, \s-1PEVANS\s0)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011\-2019 by Graham Ollis.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
